(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{424:function(t,e,o){"use strict";o.r(e);var a=o(25),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h2",{attrs:{id:"behavioral-distance-heatmap-options"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#behavioral-distance-heatmap-options"}},[t._v("#")]),t._v(" Behavioral Distance Heatmap Options")]),t._v(" "),o("h1",[t._v("Computed")]),t._v(" "),o("ol",[o("li",[o("code",{pre:!0},[t._v("method_options_spec")]),t._v(": In computed and watch, changes based on the current dataset. Retrieves data from store.")]),t._v(" "),o("li",[o("code",{pre:!0},[t._v("group_options")]),t._v(": Contains current groups present on heatmap. If the dataView currently has no filter, it will return the entire datasource, otherwise it will return the filtered source.")]),t._v(" "),o("li",[o("code",{pre:!0},[t._v("colorscale")]),t._v(": Setting for colorscale of the Heatmap. If changed, it will send a signal for the store to commit the "),o("code",{pre:!0},[t._v("updateComponentSettings")]),t._v(" mutation.")]),t._v(" "),o("li",[o("code",{pre:!0},[t._v("distance_metric")]),t._v(": Setting for distance metric of the Heatmap. If changed, it will send a signal for the store to commit the "),o("code",{pre:!0},[t._v("updateComponentSettings")]),t._v(" mutation.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);